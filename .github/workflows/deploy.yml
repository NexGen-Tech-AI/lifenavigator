name: Deploy

on:
  workflow_run:
    workflows: [CI]
    branches: [main, develop]
    types: [completed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image_tag: ${{ steps.set-tag.outputs.tag }}
      
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Set image tag
        id: set-tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            tag_suffix="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            tag_suffix="production"
          else
            tag_suffix="dev"
          fi
          echo "tag=sha-${GITHUB_SHA::7}-${tag_suffix}" >> $GITHUB_OUTPUT
  
  terraform:
    name: Terraform
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="region=us-east-1" \
            -backend-config="bucket=lifenavigator-terraform-state-${{ needs.prepare.outputs.environment }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=lifenavigator-terraform-locks-${{ needs.prepare.outputs.environment }}"
        
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="environment=${{ needs.prepare.outputs.environment }}" -var="app_container_image=${{ needs.prepare.outputs.image_tag }}" -out=tfplan
      
      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
      
      - name: Terraform Output
        id: terraform-output
        run: |
          cd terraform
          echo "::set-output name=ecr_repository_url::$(terraform output -raw ecr_repository_url)"
          echo "::set-output name=ecs_cluster_name::$(terraform output -raw ecs_cluster_name)"
          echo "::set-output name=app_url::$(terraform output -raw app_url)"
          
  deploy:
    name: Deploy to ECS
    needs: [prepare, terraform]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set ECR Image URI
        id: set-image-uri
        run: |
          ECR_REPOSITORY=$(aws ecr describe-repositories --repository-names lifenavigator-${{ needs.prepare.outputs.environment }}-app --query 'repositories[0].repositoryUri' --output text)
          echo "::set-output name=image_uri::${ECR_REPOSITORY}:${{ needs.prepare.outputs.image_tag }}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build and push image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.set-image-uri.outputs.image_uri }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster lifenavigator-${{ needs.prepare.outputs.environment }} --service lifenavigator-${{ needs.prepare.outputs.environment }}-app --force-new-deployment
      
      - name: Wait for ECS deployment to complete
        run: |
          aws ecs wait services-stable --cluster lifenavigator-${{ needs.prepare.outputs.environment }} --services lifenavigator-${{ needs.prepare.outputs.environment }}-app
  
  database:
    name: Database Migrations
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Get database connection string
        id: db-secret
        run: |
          SECRET_ARN=$(aws secretsmanager list-secrets --filters Key=name,Values=lifenavigator/${{ needs.prepare.outputs.environment }}/app --query 'SecretList[0].ARN' --output text)
          DATABASE_URL=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN --query 'SecretString' --output text | jq -r '.DATABASE_URL')
          echo "::set-output name=database_url::${DATABASE_URL}"
          
      - name: Run database migrations
        run: |
          echo "DATABASE_URL=${{ steps.db-secret.outputs.database_url }}" > .env
          npx prisma migrate deploy
  
  notify:
    name: Notify Deployment
    needs: [prepare, deploy, database]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.deploy.result == 'success' && needs.database.result == 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "‚úÖ Deployment to ${{ needs.prepare.outputs.environment }} successful! üöÄ\nApp URL: ${{ needs.terraform.outputs.app_url }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify failure
        if: ${{ needs.deploy.result != 'success' || needs.database.result != 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "‚ùå Deployment to ${{ needs.prepare.outputs.environment }} failed! Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}