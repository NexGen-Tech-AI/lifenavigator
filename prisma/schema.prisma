generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String            @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  setupCompleted Boolean           @default(false)
  accounts       Account[]
  budgets        Budget[]
  careerData     CareerRecord[]
  educationData  EducationRecord[]
  finances       FinancialRecord[]
  healthData     HealthRecord[]
  investments    Investment[]
  riskProfile    RiskProfile?
  roadmaps       Roadmap[]
  sessions       Session[]
  goals          UserGoals?
  settings       UserSettings?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("system")
  currency             String   @default("USD")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model FinancialRecord {
  id               String   @id @default(cuid())
  userId           String
  totalNetWorth    Float?
  totalAssets      Float?
  totalLiabilities Float?
  lastCalculated   DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_records")
}

model Budget {
  id          String           @id @default(cuid())
  userId      String
  name        String
  totalBudget Float
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categories  BudgetCategory[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model BudgetCategory {
  id        String   @id @default(cuid())
  budgetId  String
  name      String
  allocated Float
  spent     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_categories")
}

model Investment {
  id            String   @id @default(cuid())
  userId        String
  name          String
  type          String
  value         Float
  purchasePrice Float
  purchaseDate  DateTime
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model CareerRecord {
  id               String            @id @default(cuid())
  userId           String
  currentRole      String?
  company          String?
  industry         String?
  yearsExperience  Int?
  salaryRange      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobApplications  JobApplication[]
  networkingEvents NetworkingEvent[]
  skills           Skill[]

  @@map("career_records")
}

model Skill {
  id              String       @id @default(cuid())
  careerRecordId  String
  name            String
  proficiency     Int
  yearsExperience Float?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  careerRecord    CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model JobApplication {
  id             String       @id @default(cuid())
  careerRecordId String
  company        String
  role           String
  appliedDate    DateTime
  status         String
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  careerRecord   CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)

  @@map("job_applications")
}

model NetworkingEvent {
  id             String       @id @default(cuid())
  careerRecordId String
  name           String
  date           DateTime
  location       String?
  description    String?
  outcome        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  careerRecord   CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)

  @@map("networking_events")
}

model EducationRecord {
  id             String          @id @default(cuid())
  userId         String
  highestDegree  String?
  fieldOfStudy   String?
  institution    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  certifications Certification[]
  courses        Course[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("education_records")
}

model Course {
  id                String          @id @default(cuid())
  educationRecordId String
  name              String
  provider          String
  startDate         DateTime
  endDate           DateTime?
  status            String
  grade             String?
  credits           Int?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  educationRecord   EducationRecord @relation(fields: [educationRecordId], references: [id], onDelete: Cascade)

  @@map("courses")
}

model Certification {
  id                String          @id @default(cuid())
  educationRecordId String
  name              String
  issuer            String
  issueDate         DateTime
  expirationDate    DateTime?
  credentialId      String?
  credentialUrl     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  educationRecord   EducationRecord @relation(fields: [educationRecordId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model HealthRecord {
  id           String               @id @default(cuid())
  userId       String
  height       Float?
  weight       Float?
  bloodType    String?
  allergies    String?
  medications  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments MedicalAppointment[]
  vitalSigns   VitalSign[]

  @@map("health_records")
}

model VitalSign {
  id             String       @id @default(cuid())
  healthRecordId String
  type           String
  value          String
  unit           String
  recordedAt     DateTime
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)

  @@map("vital_signs")
}

model MedicalAppointment {
  id             String       @id @default(cuid())
  healthRecordId String
  doctor         String
  specialty      String?
  date           DateTime
  reason         String?
  notes          String?
  completed      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)

  @@map("medical_appointments")
}

model Roadmap {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  domain      String
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  milestones  Milestone[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("roadmaps")
}

model Milestone {
  id            String    @id @default(cuid())
  roadmapId     String
  title         String
  description   String?
  targetDate    DateTime?
  completedDate DateTime?
  status        String
  priority      Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roadmap       Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model UserGoals {
  id             String   @id @default(cuid())
  userId         String   @unique
  financialGoals Json?
  careerGoals    Json?
  educationGoals Json?
  healthGoals    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_goals")
}

model RiskProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  riskTheta              Float
  financialRiskTolerance Float?
  careerRiskTolerance    Float?
  healthRiskTolerance    Float?
  educationRiskTolerance Float?
  assessmentResponses    Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("risk_profiles")
}
