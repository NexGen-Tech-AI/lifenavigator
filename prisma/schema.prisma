// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts      Account[]
  sessions      Session[]

  // Domain data
  finances      FinancialRecord[]
  budgets       Budget[]
  investments   Investment[]
  careerData    CareerRecord[]
  educationData EducationRecord[]
  healthData    HealthRecord[]
  roadmaps      Roadmap[]

  // User settings
  settings      UserSettings?
  
  @@map("users")
}

// NextAuth models
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User settings model
model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  theme             String   @default("system") // light, dark, system
  currency          String   @default("USD")
  notificationsEnabled Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Finance domain models
model FinancialRecord {
  id              String   @id @default(cuid())
  userId          String
  totalNetWorth   Float?
  totalAssets     Float?
  totalLiabilities Float?
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("financial_records")
}

model Budget {
  id              String   @id @default(cuid())
  userId          String
  name            String
  totalBudget     Float
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  categories      BudgetCategory[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}

model BudgetCategory {
  id              String   @id @default(cuid())
  budgetId        String
  name            String
  allocated       Float
  spent           Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  budget          Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  
  @@map("budget_categories")
}

model Investment {
  id              String   @id @default(cuid())
  userId          String
  name            String
  type            String   // stock, bond, crypto, real_estate, etc.
  value           Float
  purchasePrice   Float
  purchaseDate    DateTime
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("investments")
}

// Career domain models
model CareerRecord {
  id              String   @id @default(cuid())
  userId          String
  currentRole     String?
  company         String?
  industry        String?
  yearsExperience Int?
  salaryRange     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  skills          Skill[]
  jobApplications JobApplication[]
  networkingEvents NetworkingEvent[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("career_records")
}

model Skill {
  id              String   @id @default(cuid())
  careerRecordId  String
  name            String
  proficiency     Int      // 1-5 scale
  yearsExperience Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  careerRecord    CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)
  
  @@map("skills")
}

model JobApplication {
  id              String   @id @default(cuid())
  careerRecordId  String
  company         String
  role            String
  appliedDate     DateTime
  status          String   // applied, interview, rejected, accepted
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  careerRecord    CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)
  
  @@map("job_applications")
}

model NetworkingEvent {
  id              String   @id @default(cuid())
  careerRecordId  String
  name            String
  date            DateTime
  location        String?
  description     String?  @db.Text
  outcome         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  careerRecord    CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)
  
  @@map("networking_events")
}

// Education domain models
model EducationRecord {
  id              String   @id @default(cuid())
  userId          String
  highestDegree   String?
  fieldOfStudy    String?
  institution     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  courses         Course[]
  certifications  Certification[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("education_records")
}

model Course {
  id                String   @id @default(cuid())
  educationRecordId String
  name              String
  provider          String
  startDate         DateTime
  endDate           DateTime?
  status            String   // in_progress, completed, dropped
  grade             String?
  credits           Int?
  notes             String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  educationRecord   EducationRecord @relation(fields: [educationRecordId], references: [id], onDelete: Cascade)
  
  @@map("courses")
}

model Certification {
  id                String   @id @default(cuid())
  educationRecordId String
  name              String
  issuer            String
  issueDate         DateTime
  expirationDate    DateTime?
  credentialId      String?
  credentialUrl     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  educationRecord   EducationRecord @relation(fields: [educationRecordId], references: [id], onDelete: Cascade)
  
  @@map("certifications")
}

// Health domain models
model HealthRecord {
  id              String   @id @default(cuid())
  userId          String
  height          Float?   // in cm
  weight          Float?   // in kg
  bloodType       String?
  allergies       String?
  medications     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  vitalSigns      VitalSign[]
  appointments    MedicalAppointment[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("health_records")
}

model VitalSign {
  id              String   @id @default(cuid())
  healthRecordId  String
  type            String   // blood_pressure, heart_rate, temperature, etc.
  value           String
  unit            String
  recordedAt      DateTime
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  healthRecord    HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)
  
  @@map("vital_signs")
}

model MedicalAppointment {
  id              String   @id @default(cuid())
  healthRecordId  String
  doctor          String
  specialty       String?
  date            DateTime
  reason          String?
  notes           String?  @db.Text
  completed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  healthRecord    HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)
  
  @@map("medical_appointments")
}

// Roadmap models
model Roadmap {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String?  @db.Text
  domain          String   // financial, career, education, health, comprehensive
  status          String   // draft, active, completed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  milestones      Milestone[]
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("roadmaps")
}

model Milestone {
  id              String   @id @default(cuid())
  roadmapId       String
  title           String
  description     String?  @db.Text
  targetDate      DateTime?
  completedDate   DateTime?
  status          String   // not_started, in_progress, completed
  priority        Int      @default(1) // 1 (high) to 5 (low)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  roadmap         Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  
  @@map("milestones")
}