// This is a comprehensive schema for LifeNavigator's Vercel PostgreSQL deployment
// It includes all core models across domains while considering future migrations

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // Uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Uses a direct connection
}

//=====================
// AUTHENTICATION & USERS
//=====================

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  name                  String?
  password              String?
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  setupCompleted        Boolean                 @default(false)
  lastLogin             DateTime?
  isActive              Boolean                 @default(true)
  
  // Relations
  accounts              Account[]
  sessions              Session[]
  financialAccounts     FinancialAccount[]
  financialTransactions Transaction[]
  financialAssets       Asset[]
  financialGoals        FinancialGoal[]
  healthRecords         HealthRecord[]
  healthMetrics         HealthMetric[]
  educationRecords      EducationRecord[]
  educationCourses      EducationCourse[]
  careerProfiles        CareerProfile[]
  careerApplications    JobApplication[]
  documents             Document[]
  notifications         Notification[]
  preferences           UserPreference?
  securityAuditLogs     SecurityAuditLog[]
  revokedTokens         RevokedToken[]
  savedSearches         SavedSearch[]
  integrations          UserIntegration[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model RevokedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  revokedAt DateTime @default(now())
  expiresAt DateTime
  reason    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("revoked_tokens")
}

model SecurityAuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  ipAddress String?
  userAgent String?
  details   Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("security_audit_logs")
}

//=====================
// USER PREFERENCES
//=====================

model UserPreference {
  id                   String  @id @default(cuid())
  userId               String  @unique
  theme                String  @default("system") // light, dark, system
  currency             String  @default("USD")
  language             String  @default("en")
  timezone             String  @default("UTC")
  emailNotifications   Boolean @default(true)
  pushNotifications    Boolean @default(true)
  newsletterSubscribed Boolean @default(true)
  dateFormat           String  @default("MM/DD/YYYY")
  colorScheme          String? // custom color preferences
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?
  expiresAt DateTime?
  data      Json?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("notifications")
}

//=====================
// FINANCIAL MODELS
//=====================

model FinancialAccount {
  id                String        @id @default(cuid())
  userId            String
  name              String
  type              String        // checking, savings, investment, credit, loan
  institution       String
  accountNumber     String?       // encrypted
  balance           Float
  currency          String        @default("USD")
  isActive          Boolean       @default(true)
  lastUpdated       DateTime      @default(now())
  createdAt         DateTime      @default(now())
  notes             String?
  integrationId     String?       // ID for third-party integration
  transactions      Transaction[]
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@map("financial_accounts")
}

model Transaction {
  id                String          @id @default(cuid())
  userId            String
  accountId         String
  amount            Float
  currency          String          @default("USD")
  description       String
  category          String
  date              DateTime
  type              String          // income, expense, transfer
  isRecurring       Boolean         @default(false)
  merchantName      String?
  status            String          @default("completed")
  locationLat       Float?
  locationLong      Float?
  tags              String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  account           FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@index([date])
  @@index([category])
  @@map("transactions")
}

model Asset {
  id                String   @id @default(cuid())
  userId            String
  name              String
  type              String   // real_estate, vehicle, cryptocurrency, collectible, other
  value             Float
  currency          String   @default("USD")
  purchaseDate      DateTime?
  purchasePrice     Float?
  currentValue      Float
  lastValuationDate DateTime @default(now())
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("assets")
}

model FinancialGoal {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  targetAmount Float
  currentAmount Float   @default(0)
  currency    String   @default("USD")
  deadline    DateTime?
  priority    String   @default("medium") // low, medium, high
  status      String   @default("in_progress") // not_started, in_progress, completed, abandoned
  category    String   // retirement, education, home, emergency, other
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("financial_goals")
}

//=====================
// HEALTH MODELS
//=====================

model HealthRecord {
  id                String   @id @default(cuid())
  userId            String
  type              String   // medical_visit, procedure, diagnosis, medication, immunization
  providerName      String?
  date              DateTime
  description       String
  attachmentUrl     String?  // URL to a secure document/attachment
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@map("health_records")
}

model HealthMetric {
  id          String   @id @default(cuid())
  userId      String
  type        String   // weight, blood_pressure, heart_rate, sleep, steps, etc.
  value       Float
  unit        String
  date        DateTime
  notes       String?
  source      String   @default("manual") // manual, device, integration
  deviceId    String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([type])
  @@map("health_metrics")
}

//=====================
// EDUCATION MODELS
//=====================

model EducationRecord {
  id          String   @id @default(cuid())
  userId      String
  institution String
  degree      String?
  fieldOfStudy String?
  startDate   DateTime
  endDate     DateTime?
  grade       String?
  description String?
  certificateUrl String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("education_records")
}

model EducationCourse {
  id          String   @id @default(cuid())
  userId      String
  title       String
  provider    String
  url         String?
  startDate   DateTime?
  endDate     DateTime?
  status      String   @default("in_progress") // not_started, in_progress, completed, abandoned
  progress    Float    @default(0) // 0 to 100
  certificateEarned Boolean @default(false)
  certificateUrl String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("education_courses")
}

//=====================
// CAREER MODELS
//=====================

model CareerProfile {
  id              String   @id @default(cuid())
  userId          String
  title           String?
  company         String?
  industry        String?
  yearsExperience Int?
  skills          String[]
  bio             String?
  resumeUrl       String?
  linkedInUrl     String?
  githubUrl       String?
  portfolioUrl    String?
  salaryExpectation Float?
  availableFrom   DateTime?
  jobSearchStatus String   @default("passive") // active, passive, not_looking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("career_profiles")
}

model JobApplication {
  id            String   @id @default(cuid())
  userId        String
  companyName   String
  position      String
  applicationDate DateTime
  status        String   // applied, interviewing, offer, rejected, accepted, withdrawn
  contactName   String?
  contactEmail  String?
  salary        Float?
  location      String?
  remote        Boolean  @default(false)
  notes         String?
  nextStep      String?
  nextStepDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([applicationDate])
  @@map("job_applications")
}

//=====================
// DOCUMENT MODELS
//=====================

model Document {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  fileUrl     String   // URL to the encrypted document
  fileName    String
  fileType    String
  fileSize    Int
  category    String   // financial, health, education, career, personal
  tags        String[]
  isEncrypted Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
  @@map("documents")
}

//=====================
// SEARCH & ANALYTICS MODELS
//=====================

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  query       String
  filters     Json?
  resultsCount Int?
  category    String
  name        String?
  createdAt   DateTime @default(now())
  lastRun     DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saved_searches")
}

//=====================
// INTEGRATION MODELS
//=====================

model UserIntegration {
  id              String   @id @default(cuid())
  userId          String
  provider        String
  providerUserId  String?
  accessToken     String?  @db.Text
  refreshToken    String?  @db.Text
  expiresAt       DateTime?
  scopes          String[]
  status          String   @default("active") // active, revoked, expired
  lastSyncedAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([provider])
  @@map("user_integrations")
}