generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String            @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  setupCompleted Boolean           @default(false)
  metadata       Json?             // Store persona, badges, and other user-specific data
  accounts       Account[]
  budgets        Budget[]
  careerData     CareerRecord[]
  educationData  EducationRecord[]
  finances       FinancialRecord[]
  healthData     HealthRecord[]
  investments    Investment[]
  riskProfile    RiskProfile?
  roadmaps       Roadmap[]
  sessions       Session[]
  goals          UserGoals?
  settings       UserSettings?
  integrations   Integration[]
  taxProfiles    TaxProfile[]
  emailConnections EmailConnection[]
  calendarConnections CalendarConnection[]
  calendarEvents CalendarEvent[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("system")
  currency             String   @default("USD")
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model FinancialRecord {
  id               String   @id @default(cuid())
  userId           String
  totalNetWorth    Float?
  totalAssets      Float?
  totalLiabilities Float?
  lastCalculated   DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_records")
}

model Budget {
  id          String           @id @default(cuid())
  userId      String
  name        String
  totalBudget Float
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categories  BudgetCategory[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model BudgetCategory {
  id        String   @id @default(cuid())
  budgetId  String
  name      String
  allocated Float
  spent     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budget    Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@map("budget_categories")
}

model Investment {
  id            String   @id @default(cuid())
  userId        String
  name          String
  type          String
  value         Float
  purchasePrice Float
  purchaseDate  DateTime
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model CareerRecord {
  id               String            @id @default(cuid())
  userId           String
  currentRole      String?
  company          String?
  industry         String?
  yearsExperience  Int?
  salaryRange      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobApplications  JobApplication[]
  networkingEvents NetworkingEvent[]
  skills           Skill[]

  @@map("career_records")
}

model Skill {
  id              String       @id @default(cuid())
  careerRecordId  String
  name            String
  proficiency     Int
  yearsExperience Float?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  careerRecord    CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model JobApplication {
  id             String       @id @default(cuid())
  careerRecordId String
  company        String
  role           String
  appliedDate    DateTime
  status         String
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  careerRecord   CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)

  @@map("job_applications")
}

model NetworkingEvent {
  id             String       @id @default(cuid())
  careerRecordId String
  name           String
  date           DateTime
  location       String?
  description    String?
  outcome        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  careerRecord   CareerRecord @relation(fields: [careerRecordId], references: [id], onDelete: Cascade)

  @@map("networking_events")
}

model EducationRecord {
  id             String          @id @default(cuid())
  userId         String
  highestDegree  String?
  fieldOfStudy   String?
  institution    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  certifications Certification[]
  courses        Course[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("education_records")
}

model Course {
  id                String          @id @default(cuid())
  educationRecordId String
  name              String
  provider          String
  startDate         DateTime
  endDate           DateTime?
  status            String
  grade             String?
  credits           Int?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  educationRecord   EducationRecord @relation(fields: [educationRecordId], references: [id], onDelete: Cascade)

  @@map("courses")
}

model Certification {
  id                String          @id @default(cuid())
  educationRecordId String
  name              String
  issuer            String
  issueDate         DateTime
  expirationDate    DateTime?
  credentialId      String?
  credentialUrl     String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  educationRecord   EducationRecord @relation(fields: [educationRecordId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model HealthRecord {
  id              String               @id @default(cuid())
  userId          String
  height          Float?
  weight          Float?
  bloodType       String?
  allergies       String?
  medications     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments    MedicalAppointment[]
  vitalSigns      VitalSign[]
  secureDocuments SecureDocument[]

  @@map("health_records")
}

model VitalSign {
  id             String       @id @default(cuid())
  healthRecordId String
  type           String
  value          String
  unit           String
  recordedAt     DateTime
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)

  @@map("vital_signs")
}

model MedicalAppointment {
  id             String       @id @default(cuid())
  healthRecordId String
  doctor         String
  specialty      String?
  date           DateTime
  reason         String?
  notes          String?
  completed      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)

  @@map("medical_appointments")
}

model Roadmap {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  domain      String
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  milestones  Milestone[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("roadmaps")
}

model Milestone {
  id            String    @id @default(cuid())
  roadmapId     String
  title         String
  description   String?
  targetDate    DateTime?
  completedDate DateTime?
  status        String
  priority      Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roadmap       Roadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model UserGoals {
  id             String   @id @default(cuid())
  userId         String   @unique
  financialGoals Json?
  careerGoals    Json?
  educationGoals Json?
  healthGoals    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_goals")
}

model TaxProfile {
  id          String   @id @default(cuid())
  userId      String
  taxYear     Int
  w4          Json?
  income      Json?
  deductions  Json?
  credits     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taxYear])
  @@map("tax_profiles")
}

model RiskProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  riskTheta              Float
  financialRiskTolerance Float?
  careerRiskTolerance    Float?
  healthRiskTolerance    Float?
  educationRiskTolerance Float?
  assessmentResponses    Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("risk_profiles")
}

model SecureDocument {
  id                String              @id @default(cuid())
  healthRecordId    String
  filename          String
  originalFilename  String
  fileType          String
  mimeType          String
  category          String
  s3Key             String              @unique
  s3Bucket          String
  size              Int
  encryptionMethod  String
  encryptionKeyId   String?             // Reference to key in secure key management
  encryptionIV      String?             // Initialization vector for encryption (if stored)
  kmsKeyId          String?             // AWS KMS key ID if using KMS
  uploadDate        DateTime            @default(now())
  lastAccessed      DateTime?
  favorite          Boolean             @default(false)
  shared            Boolean             @default(false)
  expiresAt         DateTime?           // For temporary access links
  thumbnailKey      String?             // S3 key for thumbnail, if available
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  healthRecord      HealthRecord        @relation(fields: [healthRecordId], references: [id], onDelete: Cascade)
  documentTags      DocumentTag[]
  documentShares    DocumentShare[]
  accessLogs        DocumentAccessLog[]

  @@map("secure_documents")
}

model DocumentTag {
  id             String         @id @default(cuid())
  documentId     String
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  secureDocument SecureDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, name])
  @@map("document_tags")
}

model DocumentShare {
  id             String         @id @default(cuid())
  documentId     String
  recipientEmail String
  accessCode     String         @unique // Unique code for secure access
  accessLevel    String         // "view", "download", "edit"
  expiresAt      DateTime
  accessed       Boolean        @default(false)
  accessedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  secureDocument SecureDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_shares")
}

model DocumentAccessLog {
  id             String         @id @default(cuid())
  documentId     String
  accessType     String         // "view", "download", "edit", "delete", etc.
  ipAddress      String?
  userAgent      String?
  accessedAt     DateTime       @default(now())
  success        Boolean        @default(true)
  details        String?
  secureDocument SecureDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_access_logs")
}

// Integration models
model Integration {
  id               String             @id @default(cuid())
  userId           String
  providerId       String             // e.g., "plaid", "ynab", "epic_mychart"
  providerName     String             // Human-readable name
  providerCategory String             // "finance", "healthcare", etc.
  name             String?            // User-provided name
  status           String             // "active", "needs_attention", "expired"
  metadata         Json?              // Provider-specific metadata
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastSyncedAt     DateTime?
  expiresAt        DateTime?
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  token            IntegrationToken?
  syncHistory      IntegrationSync[]

  @@unique([userId, providerId])
  @@map("integrations")
}

model IntegrationToken {
  id            String      @id @default(cuid())
  integrationId String      @unique
  accessToken   String
  refreshToken  String?
  tokenType     String?
  expiresAt     DateTime?
  scopes        String?     // Comma-separated list of scopes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("integration_tokens")
}

model IntegrationSync {
  id            String      @id @default(cuid())
  integrationId String
  status        String      // "success", "in_progress", "failed"
  startedAt     DateTime
  completedAt   DateTime?
  error         String?
  details       Json?
  createdAt     DateTime    @default(now())
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("integration_syncs")
}

model OAuthState {
  id           String   @id @default(cuid())
  state        String   @unique
  codeVerifier String?
  userId       String
  providerId   String
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  @@map("oauth_states")
}

// Email and Calendar integration models
model EmailConnection {
  id                  String               @id @default(cuid())
  userId              String
  provider            String               // e.g., "gmail", "outlook", "yahoo"
  email               String
  connected           Boolean              @default(true)
  lastSync            DateTime             @default(now())
  credentials         String?              // Encrypted credentials for non-OAuth connections
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarConnections CalendarConnection[]
  folders             EmailFolder[]
  messages            EmailMessage[]

  @@unique([userId, email])
  @@map("email_connections")
}

model EmailFolder {
  id                String          @id @default(cuid())
  emailConnectionId String
  name              String          // e.g., "inbox", "sent", "drafts"
  path              String          // Full path if nested folder
  unread            Int             @default(0)
  total             Int             @default(0)
  system            Boolean         @default(false)  // Whether it's a system folder
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  emailConnection   EmailConnection @relation(fields: [emailConnectionId], references: [id], onDelete: Cascade)
  messages          EmailMessage[]

  @@unique([emailConnectionId, path])
  @@map("email_folders")
}

model EmailMessage {
  id                String          @id @default(cuid())
  emailConnectionId String
  folderId          String
  messageId         String          // Email header Message-ID
  threadId          String?         // For conversation threading
  subject           String
  fromName          String
  fromEmail         String
  to                String          // JSON array of recipients
  cc                String?         // JSON array of CC recipients
  bcc               String?         // JSON array of BCC recipients
  date              DateTime
  body              String?         // Text body
  htmlBody          String?         // HTML body
  snippet           String?         // Preview snippet
  read              Boolean         @default(false)
  starred           Boolean         @default(false)
  hasAttachments    Boolean         @default(false)
  labels            String?         // JSON array of labels/tags
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  emailConnection   EmailConnection @relation(fields: [emailConnectionId], references: [id], onDelete: Cascade)
  folder            EmailFolder     @relation(fields: [folderId], references: [id], onDelete: Cascade)
  attachments       EmailAttachment[]

  @@unique([emailConnectionId, messageId])
  @@map("email_messages")
}

model EmailAttachment {
  id              String        @id @default(cuid())
  messageId       String
  filename        String
  contentType     String
  size            Int
  contentId       String?       // For inline attachments
  s3Key           String?       // If stored in S3
  s3Bucket        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  message         EmailMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("email_attachments")
}

model CalendarConnection {
  id                String          @id @default(cuid())
  userId            String
  provider          String          // e.g., "google", "outlook", "apple"
  name              String          // Display name for the calendar
  email             String          // Associated email address
  connected         Boolean         @default(true)
  lastSync          DateTime?
  color             String?         // Color code for the calendar
  isDefault         Boolean         @default(false)
  emailConnectionId String?         // Link to email if connected that way
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailConnection   EmailConnection? @relation(fields: [emailConnectionId], references: [id], onDelete: SetNull)
  events            CalendarEvent[]

  @@unique([userId, email])
  @@map("calendar_connections")
}

model CalendarEvent {
  id                String             @id @default(cuid())
  userId            String
  calendarId        String
  externalId        String?            // Original ID from the provider
  title             String
  description       String?
  location          String?
  startTime         DateTime
  endTime           DateTime
  timezone          String?
  isAllDay          Boolean            @default(false)
  recurrence        String?            // RRULE format
  status            String?            // "confirmed", "tentative", "cancelled"
  color             String?
  url               String?
  organizer         String?            // JSON with name and email
  attendees         String?            // JSON array of attendees
  alerts            String?            // JSON array of reminders
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendar          CalendarConnection @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@unique([calendarId, externalId])
  @@map("calendar_events")
}